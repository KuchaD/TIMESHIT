@page "/"
@using Mediator
@using Microsoft.Extensions.Options
@using TimeShitApp.Application
@using TimeShitApp.Options
@inject IMediator _mediator;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@inject IOptions<GeneralSetting> generalSetting;
@inject NavigationManager NavigationManager

@if (isLogin)
{
    NavigationManager.NavigateTo("/time");
}
else
{
    <div class="w-100 d-flex justify-content-center">
        <div class="w-50 justify-content-center d-flex row">
            <h3 class="col-12">Login: </h3>
            <div class="col-12">
                <Form Model="@loginModel"
                      OnFinish="HandleValidSubmit"
                      LabelColSpan="8"
                      WrapperColSpan="16">
                    <FormItem Label="Email">
                        <Input @bind-Value="@context.Username"/>
                    </FormItem>
                    <FormItem Label="Password">
                        <InputPassword @bind-Value="@context.Password"/>
                    </FormItem>
                    <FormItem WrapperColOffset="8" WrapperColSpan="16">
                        <Button Type="@ButtonType.Primary" HtmlType="submit">
                            Submit
                        </Button>
                    </FormItem>
                </Form>
            </div>
            <div class="col-12 mt-2">
                @if (ErrorMessage is not null)
                {
                    <div class="alert alert-danger" role="alert">
                        @ErrorMessage
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
    
    private LoginModel loginModel = new ();
    public bool isLogin { get; set; }
    public string ErrorMessage { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLogin = await sessionStorage.ContainKeyAsync(StorageConstants.StorageCredentions);
            StateHasChanged(); 
        }
    } 

    private async Task HandleValidSubmit()
    {
        var user = Utils.CreateBasicAuth(loginModel.Username, loginModel.Password);
        var encryptUser = AesOperation.EncryptString(generalSetting.Value.EncryptionKey, user);

        var result = await _mediator.Send(new UserDataRequest(loginModel.Username, loginModel.Password));

        if (result.IsSuccess)
        {
            await sessionStorage.SetItemAsync(StorageConstants.StorageCredentions, encryptUser);
            await sessionStorage.SetItemAsync(StorageConstants.StorageUser, result.Value.User);
            NavigationManager.NavigateTo("/time");
            return;
        }

        ErrorMessage = "Username or password is incorrect.";
    }
}